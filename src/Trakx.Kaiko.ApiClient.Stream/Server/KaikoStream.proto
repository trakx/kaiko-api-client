syntax = "proto3";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "KaikoSdk";

// https://sdk.kaiko.com/#kaiko-stream-streamaggregatesspotexchangerateservicev1
service StreamAggregatesSpotExchangeRateServiceV1 {
    rpc Subscribe(StreamAggregatesSpotExchangeRateRequestV1)
    returns (stream StreamAggregatesSpotExchangeRateResponseV1);
}

// https://sdk.kaiko.com/#tocS_kaikosdkStreamAggregatesSpotExchangeRateRequestV1
message StreamAggregatesSpotExchangeRateRequestV1 {
    string code = 1; // Instrument code.
    string aggregate = 2; // Aggregate value (1s, 1m, 1h).
    // Flag to include sources in the stream (if permissions match).
    // Sources are all the prices which were used to calculate aggregated price.
    bool sources = 3;
}

// https://sdk.kaiko.com/#tocS_kaikosdkStreamAggregatesSpotExchangeRateResponseV1
message StreamAggregatesSpotExchangeRateResponseV1 {
    string aggregate = 1; // Aggregate (interval).
    string code = 2; // Instrument code (for example btc-usd).
    string price = 3; // Aggregated price for the instrument code accross exchanges.
    string sequenceId = 4; // Sequence ID for event. Sortable in lexicographic order.
    map<string, SourceV1> sources = 5;
    google.protobuf.Timestamp timestamp = 6; // Timestamp of event.
    string uid = 7;
}

// https://sdk.kaiko.com/#tocS_kaikosdkSource
message SourceV1 {
    repeated SourceDataV1 data = 1; // Prices for instrument code in each exchange.
    string price = 2; // Price for related instrument code accross exchanges.
}

// https://sdk.kaiko.com/#tocS_kaikosdkSourceData
message SourceDataV1 {
    string exchangeCode = 1; // Instrument exchange code, for example “cbse” (Coinbase).
    int64 count = 2; // Number of trades for the given instrument code and aggregate.
    string price = 3; // Price for the instrument code on the exchange and interval.
    string volume = 4; // Volume for the instrument code on the exchange and interval.
}